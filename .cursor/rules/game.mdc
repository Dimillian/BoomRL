---
description:
globs:
alwaysApply: true
---
# BoomRL Cursor Rules (TypeScript Complete)

## Project Overview
BoomRL is a browser-based roguelike Doom-style FPS built with **TypeScript**, Three.js, and Vite. It combines fast-paced first-person shooter mechanics with roguelike progression systems, featuring procedural level generation, randomized weapons with rarities, and meta-progression between runs.

**Key Documentation:**
- @README.md - Complete project overview, features, and quick start guide
- @docs/DEVELOPMENT.md - Technical architecture, current status, and development roadmap
- @docs/GAME_RULES.md - Game mechanics, progression systems, and design philosophy

## Current Status
‚úÖ **Phase 1 Complete**: Core foundation with playable FPS mechanics
‚úÖ **TypeScript Conversion Complete**: Full type safety and enhanced developer experience
üöß **Phase 2 Next**: Enemy AI, combat system, and enhanced level design
üìä **Playable at**: http://localhost:5174 (after `npm run dev`)

## Technology Stack
- **Language**: TypeScript (strict mode with comprehensive type definitions)
- **Engine**: Three.js (3D graphics with full type definitions)
- **Build Tool**: Vite (ES6 modules with TypeScript support)
- **Audio**: Howler.js (planned)
- **Styling**: CSS3 with retro terminal aesthetic
- **Development**: Path aliases, type checking, ESLint integration

## TypeScript Architecture

### Type System
```
src/types/
‚îî‚îÄ‚îÄ game.ts - Comprehensive type definitions for all game systems
```

### Converted Systems (All TypeScript)
- ‚úÖ `src/main.ts` - Entry point with proper typing
- ‚úÖ `src/core/InputManager.ts` - Input handling with typed events
- ‚úÖ `src/core/Game.ts` - Main game loop with configuration types
- ‚úÖ `src/ui/UIManager.ts` - UI management with state typing
- ‚úÖ `src/entities/Player.ts` - Player controller with stats/state types
- ‚úÖ `src/levels/Level.ts` - Level generation with configuration types
- ‚úÖ `src/weapons/WeaponSystem.ts` - Weapon generation with template types
- ‚úÖ `src/weapons/Weapon.ts` - Individual weapon with state management
- ‚úÖ `src/utils/MathUtils.ts` - Mathematical utilities with generics

### Code Organization
```
src/
‚îú‚îÄ‚îÄ main.ts              # Entry point and game initialization
‚îú‚îÄ‚îÄ types/
‚îÇ   ‚îî‚îÄ‚îÄ game.ts          # Comprehensive TypeScript type definitions
‚îú‚îÄ‚îÄ core/                # Core game systems (Game, InputManager)
‚îú‚îÄ‚îÄ entities/            # Player, enemies, items
‚îú‚îÄ‚îÄ levels/              # Procedural level generation
‚îú‚îÄ‚îÄ weapons/             # Weapon system with rarities
‚îú‚îÄ‚îÄ ui/                  # Interface management
‚îî‚îÄ‚îÄ utils/               # Utility functions
```

### TypeScript Standards
- **Strict Mode**: All strict TypeScript options enabled
- **Path Aliases**: `@/` for src, `@core/`, `@entities/`, etc.
- **Comprehensive Types**: 369-line type definition file covers all systems
- **Type Safety**: No `any` types except for carefully controlled transitions
- **Interface Design**: Clear separation between config, state, and data types

### Key Type Categories
- **Game Core**: `GameConfig`, `GameState`, `GameEvent`
- **Player System**: `PlayerStats`, `PlayerState`, `MovementInput`
- **Weapon System**: `WeaponTemplate`, `WeaponConfig`, `WeaponRarity`, `WeaponModifier`
- **Level System**: `LevelConfig`, `LevelData`, `CellType`
- **UI System**: `UIState`, `NotificationType`, `HUDElements`
- **Utility Types**: `Vector2D`, `Vector3D`, `Bounds`, `Ray`, `RaycastHit`

## Coding Standards

### TypeScript Patterns
- **Public/Private**: Clear access modifiers on all class members
- **Readonly Properties**: Immutable configuration and template data
- **Type Guards**: Safe type checking for dynamic content
- **Generic Utilities**: Reusable typed utility functions
- **Event Typing**: Strongly typed custom events

### Naming Conventions
- **Classes**: PascalCase (e.g., `WeaponSystem`, `Player`)
- **Interfaces**: PascalCase (e.g., `WeaponConfig`, `PlayerState`)
- **Methods**: camelCase (e.g., `generateRandomWeapon`, `updateUI`)
- **Types**: PascalCase (e.g., `WeaponType`, `GameEvent`)
- **Constants**: UPPER_SNAKE_CASE for static values
- **Files**: PascalCase for classes, camelCase for utilities

### Console Logging
- **Categorized**: Use emoji prefixes for easy debugging
  - üéÆ Initialization, üî´ Weapons, üó∫Ô∏è Levels, üñ•Ô∏è UI, üí• Combat
- **Typed**: Event data properly typed in CustomEvents

## Development Workflow

### TypeScript Commands
```bash
npm run dev          # Start development server with TypeScript
npm run build        # Production build with type checking
npm run type-check   # Run TypeScript compiler (no emit)
npm run preview      # Preview production build
```

### Type Development
- **Incremental**: Add types as features are developed
- **Interface First**: Define interfaces before implementation
- **Strict Compliance**: No TypeScript errors allowed in production
- **Path Aliases**: Use `@/` imports for clean module resolution

### IDE Integration
- **IntelliSense**: Full autocompletion for all game objects
- **Type Checking**: Real-time error detection
- **Refactoring**: Safe renames and code restructuring
- **Import Assistance**: Automatic import suggestions

## Core Systems (TypeScript Implementation)

### 1. Game Loop (`src/core/Game.ts`)
- **Typed Configuration**: `GameConfig` interface for all settings
- **State Management**: `GameState` interface for runtime state
- **Three.js Integration**: Fully typed scene, camera, renderer
- **Event System**: Typed custom events for game communication

### 2. Player Controller (`src/entities/Player.ts`)
- **Stats System**: `PlayerStats` for health, speed, combat values
- **State Management**: `PlayerState` for position, movement, rotation
- **Input Integration**: Typed `MovementInput` from InputManager
- **Weapon Integration**: Strongly typed weapon interactions

### 3. Weapon System (`src/weapons/`)
- **Template System**: `WeaponTemplate` interfaces for base weapon data
- **Rarity System**: `WeaponRarity` types with modifier calculations
- **State Management**: `WeaponState` for ammo, reload, fire timers
- **Modifier System**: `WeaponModifier` interfaces for special effects

### 4. Level Generation (`src/levels/Level.ts`)
- **Configuration**: `LevelConfig` for generation parameters
- **Data Structure**: `LevelData` with typed grid, spawn points
- **Collision System**: Typed collision detection with bounds checking
- **Procedural Logic**: Type-safe random generation algorithms

### 5. UI Management (`src/ui/UIManager.ts`)
- **State Tracking**: `UIState` for menu visibility and current screen
- **Event Handling**: Typed UI event dispatching
- **Dynamic Content**: Type-safe screen generation and management
- **Notification System**: `NotificationType` for user feedback

## Performance Considerations (TypeScript)
- **Compilation**: Fast incremental builds with Vite
- **Bundle Size**: No runtime type checking overhead
- **Development**: Enhanced debugging with type information
- **Refactoring**: Safe large-scale code changes

## Next Priority Tasks

### Phase 2: Game Mechanics (TypeScript Ready)
1. **Enemy System**: `EnemyConfig`, `EnemyState`, `AIBehavior` types ready
2. **Combat**: `Projectile`, `RaycastHit` interfaces for hit detection
3. **Level Features**: Typed spawn systems, item pickups, portals

### Phase 3: Roguelike Features (Types Defined)
1. **Meta-Progression**: `PlayerProgression`, `Upgrade` interfaces ready
2. **Currency System**: `Currency`, `CurrencyType` types defined
3. **Statistics**: `GameStatistics` interface for tracking

### Phase 4: Polish (Type-Safe)
1. **Audio**: Type-safe Howler.js integration
2. **Effects**: Strongly typed particle and visual effect systems
3. **Configuration**: `BoomRLConfig` for comprehensive game settings

## Debug Commands
- **Type Check**: `npm run type-check` for compilation verification
- **Development**: TypeScript-aware development server
- **Console Logs**: Emoji-categorized with typed event data
- **Performance**: TypeScript compiler performance monitoring

## Benefits Achieved
- **Type Safety**: Compile-time error detection prevents runtime issues
- **Developer Experience**: Full IntelliSense and autocompletion
- **Refactoring**: Safe code changes across large codebase
- **Documentation**: Types serve as inline API documentation
- **Scalability**: Easy to add new features with confidence
- **Team Development**: Clear interfaces for collaboration

Remember: The TypeScript conversion is complete! All 8 JavaScript files have been successfully converted with comprehensive type definitions. The game maintains full functionality while gaining significant development benefits. Focus on implementing new features using the established type system for maximum productivity and safety.
